#BFS if you use the stack, DFS if you use the queue.


class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def __repr__(self):
        return f'<{self.value}>'


root_ = Node('a')

root_.left = Node('b')
root_.right = Node('c')
root_.left.left = Node('d')
root_.left.right = Node('e')
root_.right.left = Node('f')
root_.right.right = Node('g')
root_.right.right.left = Node('h')
root_.right.right.right = Node('j')


def travers(root):
    stack = [root]
    visited = []
    while stack:
        current = stack.pop(0)
        if current.left is not None:
            stack.append(current.left)
        if current.right is not None:
            stack.append(current.right)
        if current not in visited:
            visited.append(current)
    return visited


print(travers(root_))
