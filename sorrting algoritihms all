lst = [7, 2, 6, 1, 3, -1]


def swap(arr, i, j):
    arr[i], arr[j] = arr[j], arr[i]


#  Sorrting Algorithms
def buble_sort(arr):
    for i in range(len(arr)):
        for j in range(len(arr) - 1):
            if arr[j] > arr[j + 1]:
                swap(arr, j, j + 1)


def selection_sort(arr):
    for i in range(len(arr)):
        pos = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[pos]:
                pos = j
        swap(arr, i, pos)


def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j = j - 1
        arr[j + 1] = key


def insertion_sort2(arr):
    for i in range(1, len(arr)):
        for j in range(i - 1, -1, -1):
            if arr[j + 1] < arr[j]:
                swap(arr, j, j + 1)


def shell_sort(arr):
    gap = len(arr) // 2
    while gap > 0:
        i = gap
        while i < len(arr):
            key = arr[i]
            j = i - gap
            while j >= 0 and arr[j] > key:
                arr[j + gap] = arr[j]
                j = j - gap
            arr[j + gap] = key
            i = i + 1
        gap = gap // 2


def merge_sort(arr, left, right):
    if left < right:
        mid = (left + right) // 2
        merge_sort(arr, left, mid)
        merge_sort(arr, mid + 1, right)
        _merge(arr, left, mid, right)


def _merge(arr, left, mid, right):
    i = left
    j = mid + 1
    k = left
    B = [0] * (right + 1)

    while i <= mid and j <= right:
        if arr[i] < arr[j]:
            B[k] = arr[i]
            i = i + 1
        else:
            B[k] = arr[j]
            j = j + 1
        k = k + 1

    while i <= mid:
        B[k] = arr[i]
        i = i + 1
        k = k + 1

    while j <= right:
        B[k] = arr[i]
        j = j + 1
        k = k + 1

    for x in range(left, right + 1):
        arr[x] = B[x]


def quick_sort(arr, low, high):
    if low < high:
        pi = _partition(arr, low, high)
        quick_sort(arr, low, pi - 1)
        quick_sort(arr, pi + 1, high)


def _partition(arr, low, high):
    pivot = arr[low]
    i = low + 1
    j = high

    while True:
        while i <= j and arr[i] <= pivot:
            i = i + 1
        while i <= j and arr[j] > pivot:
            j = j - 1

        if i <= j:
            arr[i], arr[j] = arr[j], arr[i]
        else:
            break

    arr[low], arr[j] = arr[j], arr[low]
    return j


quick_sort(lst, 0, len(lst) - 1)
print(lst)
